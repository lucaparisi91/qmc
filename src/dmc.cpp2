#include "dmc.h"
#include "random.h"
#include "cassert"
#include "input.h"
#include "system.h"
#include "tools.h"
#include "measures.h"
#include "geometry.h"
#include <cstdlib>
#include <fstream>
#include <iostream>
#include <sstream>
#include "wavefunction.h"
#include "omp.h"
#include "xml-input.h"

dmc::dmc(measures* m_,gatherer* g_) : qmc()
{
  // indicates the initial value of the calculation
  int calculation;
  
  detailed_balance=0;
  // import variables from an input file
  
  
  if (main_input == NULL)
    {
      cout<<"Could not parse the input file.";
      exit(2);
	
    }
  mean_walkers=main_input->reset()->get_child("algorithm")->get_child("calculation")->get_child("mean_walkers")->get_value()->get_int();
  cout << "mean_walkers: "<<mean_walkers<<endl;
  delta_walkers=main_input->reset()->get_child("algorithm")->get_child("calculation")->get_child("delta_walkers")->get_value()->get_int();
  delta_tau=main_input->reset()->get_child("algorithm")->get_child("calculation")->get_child("delta_tau")->get_value()->get_real();
  
  if (
      main_input->reset()->get_child("algorithm")->get_child("calculation")->get_attribute("detailed_balance") == NULL )
    {
      detailed_balance=0;
    }
  else
    {
      detailed_balance=main_input->reset()->get_child("algorithm")->get_child("calculation")->get_attribute("detailed_balance")->get_bool();
    }
  
  if (
      main_input->reset()->get_child("algorithm")->get_child("calculation")->get_attribute("kind")->get_string() == "tdvmc"
      )
    
    {
      smart_vmc=true;
      mean_walkers=1;
    }
  else
    {
      smart_vmc=false;
    }
  
  delta_tau_or=delta_tau;
  e_t=0;
  ws=new walkers(this);
  m=m_;
  g=g_;
  n_metropolis=0;
  success_metropolis=0;
}

// returns the optimal number of walkers for the system
int optimal_n(int n_walkers)
{
  
   int n_optimal;
   int n_remainder;
   int i;
   
   n_optimal=0;
   n_remainder=n_walkers%omp_get_num_threads();
   if (omp_get_thread_num() < n_remainder)
     {
       n_optimal=1;
     }
   n_optimal=n_optimal + n_walkers/omp_get_num_threads();
   return n_optimal;
}

void walkers::branch(walker * w)
{
  int i=0;
  // avoid a collapse if the number of walkers goes to zero
  if (w->descendants==0 )
	  {
	    
	    // kill the walker
	    // copy the last walker here...
	    if (n==1) return;
	    *w=*(ws[n-1]);
	    // ... and destroy the last element by resetting the length variable n
	    n=n-1;
	    
	  }
   if (w->descendants > 1)
    {
      // copy the walkers
      for (i=0;i<(w->descendants-1);i++)
	{
	  n=n+1;
	  if (n >= 10000)
	    {
	      cout << "Population has grown too much."<<endl;
	      exit(1);
	    }
	  if ( (n) <= ws.size())
	    {
	      
	      *ws[n-1]=*w;
	    }
	    else
	      {
		
		ws.push_back( new walker(dmc_obj));
		*ws[n-1]=*w;
	      }
	}
      
    }
  
}

walker::walker(dmc* dmc_obj_)
{
  dmc_obj=dmc_obj_;
  state=new particles(dmc_obj);
  state_tmp=new particles(dmc_obj);
  descendants=1;
  drift_force.resize(dmc_obj->geo->n_particles);
  work2.resize(dmc_obj->geo->n_particles);
  e=0;
}

// copy a walkers
walker& walker::operator=(walker & w)
{
  
  assert(state != NULL);
  assert(w.state != NULL);
  *state=*(w.state);
  drift_force=w.drift_force;
  e=w.e;
  wavefunction_value=w.wavefunction_value;
  descendants=w.descendants;
  return *this;
}

void walker::update()
{
  int i;
  double random_number;
  double barrier;
  double e_old;
  double old_wavefunction_value;
  double q;
  bool accept;
  // generate a vector of gaussian random numbers
  dmc_obj->rand->gaussian(dmc_obj->ws->work);
  
  // create a backup of current position and drift_force
  if (dmc_obj->detailed_balance==1)
    {
      *state_tmp=*state;
      work2=drift_force;
    }
  // update the position of the particles
  for (i=0;i<dmc_obj->geo->n_particles;i++)
    {
      //cout << dmc_obj->ws->work[i]<<endl;
      state->position_no_pbc[i]=state->position_no_pbc[i] + drift_force[i]*(dmc_obj->delta_tau) +
              dmc_obj->ws->work[i]*sqrt(dmc_obj->delta_tau);
      state->position[i]=dmc_obj->geo->pbc(state->position_no_pbc[i]);
    }
  
  e_old=e;
  old_wavefunction_value=wavefunction_value;
  
  // perform measurements
  make_measurements();
  // compute the wavefunction
  
  
  if (dmc_obj->detailed_balance == 1)
    {
      // commpute the non-symmetric correction to metropolis
      q=Q_probability(drift_force,work2,state_tmp->position_no_pbc,state->position_no_pbc,dmc_obj->delta_tau);
      dmc_obj->n_metropolis++;
      accept=dmc_obj->metropolis(2*(wavefunction_value - old_wavefunction_value)+ q );
    }
  else
    {
      accept=true;
    }
  
  
  if ( accept )
  
    {
      
      if (dmc_obj->detailed_balance ==1)
	{
	  dmc_obj->success_metropolis++;
	}
      // computes the barrier
      barrier=dmc_obj->delta_tau*(
				  (e + e_old)/2.
				  - dmc_obj->e_t
				  );
      random_number=dmc_obj->rand->uniform();
      // computs the numbers of descendatns
      descendants=(int)(exp(-barrier) + random_number);
      // if doing a smart vmc calculation do not do any branching
      if (dmc_obj->smart_vmc) descendants=1;
    }
  else
    {
      e=e_old;
      wavefunction_value=old_wavefunction_value;
      drift_force=work2;
      *state=*state_tmp;
      descendants=1;
    } 
    
}

void walker::make_measurements()
{
  double e_f;
  // compute the value of the wavefunction
  if (dmc_obj->detailed_balance==1)
    {
      wavefunction_value=dmc_obj->wave->log_evaluate(state);
    }
  // computes the kinetic energy of the system and the drift force
  dmc_obj->wave->kinetic_energy(state,drift_force,e,e_f);
  dmc_obj->ws->m->ms[0]->add(e,dmc_obj->current_step);
  dmc_obj->ws->m->ms[1]->add(e_f,dmc_obj->current_step);
  
  //cout<<dmc_obj->current_step<<" "<< e<<endl;
  if (dmc_obj->c->status !=0)
    {
      dmc_obj->ws->m->make_measurements(state,dmc_obj->wave); 
    }
  
}

walkers::walkers(dmc* dmc_obj_)
{
  dmc_obj=dmc_obj_;
  work.resize(dmc_obj->geo->n_particles);
  n=0;
  m=new measures(); 
}
// generate a vector of random numbers

void walkers::generate_random(int n_to_add)
{
  // add n walkers to the system
  int i;
  ws.resize(0);
  n=0;
  dmc_obj->e_t=0;
  for (i=0;i<n_to_add;i++)
    {
      n=n+1;
      ws.push_back(new walker(dmc_obj));
      // generate a gaussian initial dsitribution
      dmc_obj->rand->gaussian(ws[n-1]->state->position);
      // apply periodic boundary conditions
      dmc_obj->geo->pbc(ws[n-1]->state->position);
      ws[n-1]->make_measurements();
      dmc_obj->e_t=dmc_obj->e_t + ws[n-1]->e;
      ws[n-1]->descendants=1;
    }
  assert((n) > 0);
  dmc_obj->e_t=dmc_obj->e_t/n;
  n=dmc_obj->mean_walkers;
}
// saves the state of the DMC to a file
void dmc::save()
{
  int i,j;
  ofstream fp;
  ofstream fw;
  if (g->saving)
    {
      // if some processor has already opened the file to save the last configurations
    fp.open("walkers.dat",ios_base::app);
    }
  else
    {
      // first to saving to the file
    g->saving=true;
    #pragma omp flush
    fp.open("walkers.dat");
    }
  
  for (i=0;i<ws->n;i++)
    {
      for(j=0;j<geo->n_particles;j++)
	{
	  fp<<i<<" "<<j<<" "<< ws->ws[i]->state->position_no_pbc[j]<<endl;
	}
      
    }
  fp.close();
  // the master saves global properties of the system
  #pragma omp master
  {
  fw.open("dmc_settings.dat");
  fw << "n_particles="<< geo->n_particles <<endl;
  fw <<"n_walkers="<< g->n_walkers <<endl;
  fw <<"current_step="<<current_step <<endl;
  fw.close();
  xml_save->reset()->get_child("n_walkers")->set(int_to_string(g->n_walkers) );
  xml_save->reset()->get_child("walkers_file")->set("walkers.dat");
  xml_save->reset()->get_child("current_step")->set(real_to_string(current_step));
  xml_save->save("save.xml");
  
  }
}

void dmc::load()
{
  int i,j,n;
  int i_walker,i_walker_tmp,i_particle;
  double x;
  
  stringstream s;
  
  string line;
  xml_input* load_xml;
  
  if (!check_file_exists("save.xml") or !check_file_exists("walkers.dat") )
    {
      cout<<"No file to load.";
      ws->generate_random(2000);
      return;
    }
  load_xml=new xml_input;
  load_xml->open("save.xml");
  current_step=0;
  current_step=load_xml->reset()->get_child("current_step")->get_value()->get_int();
  n=load_xml->reset()->get_child("n_walkers")->get_value()->get_int();
  
  if (! g->load_file.is_open())
    {
      g->load_file.open("walkers.dat");
    }
  
  ws->ws.resize(0);
  ws->n=0;
  
  if (smart_vmc)
    {
      n=omp_get_num_threads();
    }
  n=optimal_n(n);
  
  for (i=0;i<n;i++)
    {
      ws->n=ws->n+1;
      (ws->ws).push_back(new walker(this));
    }
  
  ws->n=n;
  i_walker=0;
  for (i=0;i<n;i++)
    {
      for(j=0;j<geo->n_particles;j++)
	{
	  
	  getline(g->load_file,line);
	  
	  if (g->load_file.eof())
	    {
	      if (j==0)
		{
		  g->load_file.clear();
		  g->load_file.seekg(0);
		  getline(g->load_file,line);
		}
	      else
		{
		  cout<<"Reached end of file prematurely."<<endl;
		  exit(1);
		}
	    }
	    
	  s.str("");
	  s.clear();
	  s<<line;
	  s >> i_walker_tmp;
	  s >> i_particle;
	  s >> x; 
	  assert(i_walker < n);
	  assert(i_particle < geo->n_particles);
	  ws->ws[i_walker]->state->position[i_particle]=geo->pbc(x);
	  ws->ws[i_walker]->state->position_no_pbc[i_particle]=x;
	  
	}
      i_walker++;
    }
  e_t=0;
  
  if (smart_vmc)
    {
      ws->n=1;
      n=1;
    }
  
  
  #pragma critical
  {
    g->n_walkers=g->n_walkers + n;
  }

  for(i=0;i<n;i++)
    {
      ws->ws[i]->make_measurements();
      ws->ws[i]->descendants=1;
      e_t=e_t + ws->ws[i]->e; 
      
    }
  e_t=e_t/n;
  // increase the number of walkers
  
  //g->n_walkers=g->n_walkers + ws->n;
  
  
  //g->load_file.close();
  
}
// prints the state of the walkers object
void walker::print()
{
      cout <<"w--------------"<<endl;
      cout<<"pos: ";
      print_vector(state->position);
      cout<<endl;
      
      cout<<"e: "<<e<<endl;
      cout<<"descendants: "<<descendants<<endl;
}

void walkers::print()
{
  int i;
  cout<<"------------walkers("<<n<<")---------------"<<endl;
  for(i=0;i<n;i++)
    { 
      ws[i]->print();
    }
}
void dmc::step()
{
  int i,n,j;
  double e_t_tmp;
  c->increment();
  current_step++;
  ws->m->increment();
  n=ws->n;
  e_t_tmp=0;
  assert((ws->n) >0);
  
  for (i=0;i<n;i++)
    {
      // update the walker
      ws->ws[i]->update();
      
      // update the temporary e_t
      e_t_tmp=e_t_tmp + (ws->ws[i]->e)*(ws->ws[i]->descendants);
      // perform the required branching
      
    }
  //cout<<"before branch"<<endl;
  //ws->print();
  
  ws->m->record(current_step);
  for(i=0;i<n;i++)
    {
      ws->branch(ws->ws[i]);
    }
  //cout<<"after branch"<<endl;
  //ws->print();
  // update reference energy and number of walkers

  e_t=e_t_tmp;
  
}

void dmc::population_control()
{
  
  // population control
  if (g->n_walkers > (mean_walkers + delta_walkers))
    {
      
      e_t=e_t + 1./delta_tau*( log(mean_walkers*1./(mean_walkers + delta_walkers)));
    }
  else if(g->n_walkers < (mean_walkers - delta_walkers))
    {
      
      e_t=e_t + 1./delta_tau*( log(mean_walkers*1./(mean_walkers - delta_walkers))); 
    }
  
}

void dmc::run()
{
  
  running=true;
  #pragma omp critical
  {
  load();
  }
  #pragma omp barrier
  #pragma omp master
  {
    g->load_file.close();
  }
  cout<<"starting "<<omp_get_thread_num()<<"..."<<endl;
  while(true)
    {
      
      
      ready();
      if (!running) break;
      step();
      
      collect();
      out();
    }
}

void dmc::ready()
{
  success_metropolis=0;
  n_metropolis=0;
  
  #pragma omp barrier
  g->saving=false;
  m->clear();
  #pragma omp critical
  {
    
  ws->receive(g);
    //cout<<g->n_walkers<<" "<<ws->n<<" "<<omp_get_thread_num()<<endl;
  }
  #pragma omp barrier
  #pragma omp master
  {
  
    
    g->e_t=0;
    g->n_walkers=0;
    assert(g->n==0);
  }
  #pragma omp  barrier
}

void dmc::collect()
{
  
#pragma omp critical
  {
    g->e_t=g->e_t + e_t;
    g->n_walkers=g->n_walkers + ws->n;
    g->n_metropolis=g->n_metropolis + n_metropolis;
    g->success_metropolis=g->success_metropolis + success_metropolis;
  }
  
  if (c->check()==2)
    {
#pragma omp critical
  {
    //m->average_with(ws->m);
  }
    }
  #pragma omp barrier
  
  assert(g->n_walkers>0);
  #pragma omp critical
  {
  ws->send(g);
  }
  
  e_t=g->e_t/g->n_walkers;
  //cout<<delta_tau<<" "<<g->success_metropolis*1./g->n_metropolis<<endl;
  if (detailed_balance==1)
    {
  //delta_tau=delta_tau_or*(g->success_metropolis*1./g->n_metropolis);
    }
  
  population_control();
  
  if (c->check() == 2)
    {
      
      
    }
  
}

void dmc::out()
{
  
  if (c->check()==2)
    {
      
#pragma omp master
  {
#ifdef VERBOSE
  
    cout<<"----------------------------"<<endl;
    ws->m->ms[0]->print();
  cout<<"walkers: "<<g->n_walkers<<endl;
  cout<<"step:"<<current_step<<endl;
  if (detailed_balance==1)
    {
  cout<<"ratio: "<<g->success_metropolis/g->n_metropolis<<endl;
    }
  cout<<"------------------------------------------"<<endl;
#endif
  g->success_metropolis=0;
  g->n_metropolis=0;
  ws->m->out();
  ws->m->save();
}
  ws->m->clear();
    #pragma omp critical
  {
  
  save();
  }  
    }
  
}

void walker::send(gatherer *ws_global)
{
  
  if (ws_global->n >= ws_global->ws.size())
    {
      ws_global->ws.push_back(new walker(dmc_obj));
      
    }
  ws_global->n=ws_global->n+1;
  // copy the walker contents
  *(ws_global->ws[ws_global->n-1])=*this;
  
}

void walker::receive(gatherer* g)
{
  // makes sure the number of walkers is less than a certain amount
  assert(g->n<= g->ws.size());
  assert(g->n>0);
  //copy the last walkers in stack on the local walkers
  *this=*(g->ws[g->n -1]);
  g->n=g->n-1;
}
// send the excess walkers
void walkers::send(gatherer *g)
{
  int n_excess;
  int i;
  
  //cout << g->n_walkers<<endl;
  
  n_excess= n - optimal_n(g->n_walkers);
  
  if (n_excess>0)
    {
      for(i=0;i<n_excess;i++)
	{
	  ws[n - 1 - i]->send(g);
	}
      n=n-n_excess;
    }
}

void walkers::receive(gatherer *g)
{
  int n_excess;
  int n_remainder;
  int i;
  n_excess=n - optimal_n(g->n_walkers);
  if (n_excess<0)
    {
      n_excess=-n_excess;
      for(i=0;i<n_excess;i++)
	{
	  n=n+1;
	  if (n > ws.size())
	    {
	      ws.push_back(new walker(dmc_obj));
	    }
	  ws[n - 1]->receive(g);
	}
      
    }
}

gatherer::gatherer()
{
  e_t=0;
  n=0;
  n_walkers=0;
  saving=false;
  ws.resize(0);
}
 
bool dmc::metropolis(double log_ratio)
{ 
  double random_number;
  if (log_ratio >=0)
    {
      return true;
    }
  else
    {
      random_number=rand->uniform();
      assert(random_number>0);
      assert(random_number<=1);
      if ( log_ratio > log(random_number))
	{
	  return true;
	}
      else
	{
	  return false;
	}
    }
}
